import kfp
import argparse
from kfp.v2 import compiler
import google.cloud.aiplatform as aip
from typing import Dict, Any

PIPELINE_NAME = "{{pipeline_name}}"


@kfp.dsl.pipeline(
    name=PIPELINE_NAME,
    # TODO(axelmagn): configured parameters
)
def pipeline(project_id: str):
    # Use KFP components to define a pipeline here.
    # https://cloud.google.com/vertex-ai/docs/pipelines/build-pipeline#sdk
    # https://github.com/kubeflow/pipelines/tree/master/components/google-cloud
    # https://www.kubeflow.org/docs/components/pipelines/sdk/build-pipeline/
    pass


def compile(package_path: str):
    compiler.Compiler().compile(
        pipeline_func=pipeline,
        package_path=package_path,
    )


def run_job(
    template_path: str,
    pipeline_root: str,
    pipeline_params: Dict[str, Any] = {},
):
    job = aip.PipelineJob(
        display_name=PIPELINE_NAME,
        template_path=template_path,
        pipeline_root=pipeline_root,
        parameter_values=pipeline_params,
    )
    job.run()


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description=f"{PIPELINE_NAME} pipeline operations.")
    commands = parser.add_subparsers(
        help="commands", dest="command", required=True)

    # compile command arguments
    cmd_compile = commands.add_parser(
        "compile", help="compile pipeline function to a json package file.")
    cmd_compile.add_argument(
        "-o", "--output", required=True, help="package file output path.")

    # run command arguments
    cmd_run_job = commands.add_parser(
        "run", help="run pipeline job on AI platform.")
    cmd_run_job.add_argument("--package", required=True,
                             help="path to compiled pipeline package file.")
    cmd_run_job.add_argument(
        "--pipeline_root", required=True,
        help="GCS root directory for files generated by pipeline job.")
    # if needed, add arguments here for additional pipeline parameters.
    cmd_run_job.add_argument("--project", required=True, help="project ID.")

    return parser.parse_args()


def main(args):

    if args.command == "compile":
        compile(args.output)
    elif args.command == "run_job":
        aip.init()
        # If pipeline parameters are necessary, add them here.
        pipeline_params = {"project_id": args.project}
        run_job(args.package, args.pipeline_root,
                pipeline_params=pipeline_params)


if __name__ == "__main__":
    main(parse_args())
